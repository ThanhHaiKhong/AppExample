// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: types.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "Types.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(GPBStruct);
GPBObjCClassDeclaration(WATypesBytes);
GPBObjCClassDeclaration(WATypesEntry);
GPBObjCClassDeclaration(WATypesError);
GPBObjCClassDeclaration(WATypesField);
GPBObjCClassDeclaration(WATypesImage);
GPBObjCClassDeclaration(WATypesPointer);
GPBObjCClassDeclaration(WATypesString);
GPBObjCClassDeclaration(WATypesVoid);
GPBObjCClassDeclaration(WATypesWAFuture);
GPBObjCClassDeclaration(WATypesWAString);

#pragma mark - WATypesTypesRoot

@implementation WATypesTypesRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription WATypesTypesRoot_FileDescription = {
  .package = "asyncify.types",
  .prefix = "WATypes",
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - WATypesImage

@implementation WATypesImage

@dynamic hasURL, URL;
@dynamic hasData_p, data_p;
@dynamic hasMetadata, metadata;

typedef struct WATypesImage__storage_ {
  uint32_t _has_storage_[1];
  NSString *URL;
  WATypesBytes *data_p;
  GPBStruct *metadata;
} WATypesImage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "URL",
        .dataTypeSpecific.clazz = Nil,
        .number = WATypesImage_FieldNumber_URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WATypesImage__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = GPBObjCClass(WATypesBytes),
        .number = WATypesImage_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WATypesImage__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStruct),
        .number = WATypesImage_FieldNumber_Metadata,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WATypesImage__storage_, metadata),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WATypesImage)
                                   messageName:@"Image"
                               fileDescription:&WATypesTypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WATypesImage__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\001\001!!!\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WATypesBytes

@implementation WATypesBytes

@dynamic dataOneOfCase;
@dynamic raw;
@dynamic ptr;

typedef struct WATypesBytes__storage_ {
  uint32_t _has_storage_[2];
  NSData *raw;
  WATypesPointer *ptr;
} WATypesBytes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "raw",
        .dataTypeSpecific.clazz = Nil,
        .number = WATypesBytes_FieldNumber_Raw,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WATypesBytes__storage_, raw),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "ptr",
        .dataTypeSpecific.clazz = GPBObjCClass(WATypesPointer),
        .number = WATypesBytes_FieldNumber_Ptr,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WATypesBytes__storage_, ptr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WATypesBytes)
                                   messageName:@"Bytes"
                               fileDescription:&WATypesTypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WATypesBytes__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    static const char *oneofs[] = {
      "data",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void WATypesBytes_ClearDataOneOfCase(WATypesBytes *message) {
  GPBDescriptor *descriptor = [WATypesBytes descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - WATypesPointer

@implementation WATypesPointer

@dynamic ptr;
@dynamic len;

typedef struct WATypesPointer__storage_ {
  uint32_t _has_storage_[1];
  uint32_t ptr;
  uint32_t len;
} WATypesPointer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ptr",
        .dataTypeSpecific.clazz = Nil,
        .number = WATypesPointer_FieldNumber_Ptr,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WATypesPointer__storage_, ptr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "len",
        .dataTypeSpecific.clazz = Nil,
        .number = WATypesPointer_FieldNumber_Len,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WATypesPointer__storage_, len),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WATypesPointer)
                                   messageName:@"Pointer"
                               fileDescription:&WATypesTypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WATypesPointer__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WATypesString

@implementation WATypesString

@dynamic dataOneOfCase;
@dynamic raw;
@dynamic ptr;

typedef struct WATypesString__storage_ {
  uint32_t _has_storage_[2];
  NSString *raw;
  WATypesPointer *ptr;
} WATypesString__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "raw",
        .dataTypeSpecific.clazz = Nil,
        .number = WATypesString_FieldNumber_Raw,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WATypesString__storage_, raw),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ptr",
        .dataTypeSpecific.clazz = GPBObjCClass(WATypesPointer),
        .number = WATypesString_FieldNumber_Ptr,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(WATypesString__storage_, ptr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WATypesString)
                                   messageName:@"String"
                               fileDescription:&WATypesTypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WATypesString__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    static const char *oneofs[] = {
      "data",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void WATypesString_ClearDataOneOfCase(WATypesString *message) {
  GPBDescriptor *descriptor = [WATypesString descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - WATypesVoid

@implementation WATypesVoid


typedef struct WATypesVoid__storage_ {
  uint32_t _has_storage_[1];
} WATypesVoid__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WATypesVoid)
                                   messageName:@"Void"
                               fileDescription:&WATypesTypesRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(WATypesVoid__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WATypesError

@implementation WATypesError

@dynamic code;
@dynamic reason;

typedef struct WATypesError__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  NSString *reason;
} WATypesError__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = WATypesError_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WATypesError__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "reason",
        .dataTypeSpecific.clazz = Nil,
        .number = WATypesError_FieldNumber_Reason,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WATypesError__storage_, reason),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WATypesError)
                                   messageName:@"Error"
                               fileDescription:&WATypesTypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WATypesError__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WATypesWAFuture

@implementation WATypesWAFuture

@dynamic data_p;
@dynamic len;
@dynamic callback;
@dynamic context;
@dynamic contextLen;
@dynamic index;

typedef struct WATypesWAFuture__storage_ {
  uint32_t _has_storage_[1];
  uint32_t data_p;
  uint32_t len;
  uint32_t callback;
  uint32_t context;
  uint32_t contextLen;
  uint32_t index;
} WATypesWAFuture__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = WATypesWAFuture_FieldNumber_Data_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WATypesWAFuture__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "len",
        .dataTypeSpecific.clazz = Nil,
        .number = WATypesWAFuture_FieldNumber_Len,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WATypesWAFuture__storage_, len),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "callback",
        .dataTypeSpecific.clazz = Nil,
        .number = WATypesWAFuture_FieldNumber_Callback,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WATypesWAFuture__storage_, callback),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "context",
        .dataTypeSpecific.clazz = Nil,
        .number = WATypesWAFuture_FieldNumber_Context,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WATypesWAFuture__storage_, context),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "contextLen",
        .dataTypeSpecific.clazz = Nil,
        .number = WATypesWAFuture_FieldNumber_ContextLen,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(WATypesWAFuture__storage_, contextLen),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "index",
        .dataTypeSpecific.clazz = Nil,
        .number = WATypesWAFuture_FieldNumber_Index,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(WATypesWAFuture__storage_, index),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WATypesWAFuture)
                                   messageName:@"WAFuture"
                               fileDescription:&WATypesTypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WATypesWAFuture__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WATypesWAString

@implementation WATypesWAString

@dynamic ptr;
@dynamic len;

typedef struct WATypesWAString__storage_ {
  uint32_t _has_storage_[1];
  uint32_t ptr;
  uint32_t len;
} WATypesWAString__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ptr",
        .dataTypeSpecific.clazz = Nil,
        .number = WATypesWAString_FieldNumber_Ptr,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WATypesWAString__storage_, ptr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "len",
        .dataTypeSpecific.clazz = Nil,
        .number = WATypesWAString_FieldNumber_Len,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WATypesWAString__storage_, len),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WATypesWAString)
                                   messageName:@"WAString"
                               fileDescription:&WATypesTypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WATypesWAString__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WATypesField

@implementation WATypesField

@dynamic type;
@dynamic value;

typedef struct WATypesField__storage_ {
  uint32_t _has_storage_[1];
  NSString *type;
  NSString *value;
} WATypesField__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = WATypesField_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WATypesField__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.clazz = Nil,
        .number = WATypesField_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WATypesField__storage_, value),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WATypesField)
                                   messageName:@"Field"
                               fileDescription:&WATypesTypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WATypesField__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WATypesEntry

@implementation WATypesEntry

@dynamic id_p;
@dynamic name;
@dynamic desc;
@dynamic hasField, field;
@dynamic hasValidator, validator;

typedef struct WATypesEntry__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  NSString *desc;
  WATypesField *field;
  NSString *validator;
} WATypesEntry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = WATypesEntry_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WATypesEntry__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = WATypesEntry_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WATypesEntry__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "desc",
        .dataTypeSpecific.clazz = Nil,
        .number = WATypesEntry_FieldNumber_Desc,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WATypesEntry__storage_, desc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "field",
        .dataTypeSpecific.clazz = GPBObjCClass(WATypesField),
        .number = WATypesEntry_FieldNumber_Field,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(WATypesEntry__storage_, field),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "validator",
        .dataTypeSpecific.clazz = Nil,
        .number = WATypesEntry_FieldNumber_Validator,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(WATypesEntry__storage_, validator),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(WATypesEntry)
                                   messageName:@"Entry"
                               fileDescription:&WATypesTypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WATypesEntry__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
