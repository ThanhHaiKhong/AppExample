// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: types.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import "Types.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(TypesBytes);
GPBObjCClassDeclaration(TypesError);
GPBObjCClassDeclaration(TypesImage);
GPBObjCClassDeclaration(TypesPointer);
GPBObjCClassDeclaration(TypesString);
GPBObjCClassDeclaration(TypesVoid);
GPBObjCClassDeclaration(TypesWAFuture);
GPBObjCClassDeclaration(TypesWAString);

#pragma mark - TypesRoot

@implementation TypesRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription TypesRoot_FileDescription = {
  .package = "asyncify.types",
  .prefix = "Types",
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - TypesImage

@implementation TypesImage

@dynamic hasURL, URL;
@dynamic hasData_p, data_p;
@dynamic hasWidth, width;
@dynamic hasHeight, height;

typedef struct TypesImage__storage_ {
  uint32_t _has_storage_[1];
  NSString *URL;
  TypesBytes *data_p;
  double width;
  double height;
} TypesImage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "URL",
        .dataTypeSpecific.clazz = Nil,
        .number = TypesImage_FieldNumber_URL,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TypesImage__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = GPBObjCClass(TypesBytes),
        .number = TypesImage_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TypesImage__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "width",
        .dataTypeSpecific.clazz = Nil,
        .number = TypesImage_FieldNumber_Width,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TypesImage__storage_, width),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "height",
        .dataTypeSpecific.clazz = Nil,
        .number = TypesImage_FieldNumber_Height,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TypesImage__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(TypesImage)
                                   messageName:@"Image"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TypesImage__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\001\001!!!\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TypesBytes

@implementation TypesBytes

@dynamic dataOneOfCase;
@dynamic raw;
@dynamic ptr;

typedef struct TypesBytes__storage_ {
  uint32_t _has_storage_[2];
  NSData *raw;
  TypesPointer *ptr;
} TypesBytes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "raw",
        .dataTypeSpecific.clazz = Nil,
        .number = TypesBytes_FieldNumber_Raw,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TypesBytes__storage_, raw),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "ptr",
        .dataTypeSpecific.clazz = GPBObjCClass(TypesPointer),
        .number = TypesBytes_FieldNumber_Ptr,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TypesBytes__storage_, ptr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(TypesBytes)
                                   messageName:@"Bytes"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TypesBytes__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    static const char *oneofs[] = {
      "data",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void TypesBytes_ClearDataOneOfCase(TypesBytes *message) {
  GPBDescriptor *descriptor = [TypesBytes descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - TypesPointer

@implementation TypesPointer

@dynamic ptr;
@dynamic len;

typedef struct TypesPointer__storage_ {
  uint32_t _has_storage_[1];
  uint32_t ptr;
  uint32_t len;
} TypesPointer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ptr",
        .dataTypeSpecific.clazz = Nil,
        .number = TypesPointer_FieldNumber_Ptr,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TypesPointer__storage_, ptr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "len",
        .dataTypeSpecific.clazz = Nil,
        .number = TypesPointer_FieldNumber_Len,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TypesPointer__storage_, len),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(TypesPointer)
                                   messageName:@"Pointer"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TypesPointer__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TypesString

@implementation TypesString

@dynamic dataOneOfCase;
@dynamic raw;
@dynamic ptr;

typedef struct TypesString__storage_ {
  uint32_t _has_storage_[2];
  NSString *raw;
  TypesPointer *ptr;
} TypesString__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "raw",
        .dataTypeSpecific.clazz = Nil,
        .number = TypesString_FieldNumber_Raw,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TypesString__storage_, raw),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ptr",
        .dataTypeSpecific.clazz = GPBObjCClass(TypesPointer),
        .number = TypesString_FieldNumber_Ptr,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TypesString__storage_, ptr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(TypesString)
                                   messageName:@"String"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TypesString__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    static const char *oneofs[] = {
      "data",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void TypesString_ClearDataOneOfCase(TypesString *message) {
  GPBDescriptor *descriptor = [TypesString descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - TypesVoid

@implementation TypesVoid


typedef struct TypesVoid__storage_ {
  uint32_t _has_storage_[1];
} TypesVoid__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(TypesVoid)
                                   messageName:@"Void"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(TypesVoid__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TypesError

@implementation TypesError

@dynamic code;
@dynamic reason;

typedef struct TypesError__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  NSString *reason;
} TypesError__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = TypesError_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TypesError__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "reason",
        .dataTypeSpecific.clazz = Nil,
        .number = TypesError_FieldNumber_Reason,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TypesError__storage_, reason),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(TypesError)
                                   messageName:@"Error"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TypesError__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TypesWAFuture

@implementation TypesWAFuture

@dynamic data_p;
@dynamic len;
@dynamic callback;
@dynamic context;
@dynamic contextLen;
@dynamic index;

typedef struct TypesWAFuture__storage_ {
  uint32_t _has_storage_[1];
  uint32_t data_p;
  uint32_t len;
  uint32_t callback;
  uint32_t context;
  uint32_t contextLen;
  uint32_t index;
} TypesWAFuture__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = TypesWAFuture_FieldNumber_Data_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TypesWAFuture__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "len",
        .dataTypeSpecific.clazz = Nil,
        .number = TypesWAFuture_FieldNumber_Len,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TypesWAFuture__storage_, len),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "callback",
        .dataTypeSpecific.clazz = Nil,
        .number = TypesWAFuture_FieldNumber_Callback,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TypesWAFuture__storage_, callback),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "context",
        .dataTypeSpecific.clazz = Nil,
        .number = TypesWAFuture_FieldNumber_Context,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TypesWAFuture__storage_, context),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "contextLen",
        .dataTypeSpecific.clazz = Nil,
        .number = TypesWAFuture_FieldNumber_ContextLen,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TypesWAFuture__storage_, contextLen),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "index",
        .dataTypeSpecific.clazz = Nil,
        .number = TypesWAFuture_FieldNumber_Index,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TypesWAFuture__storage_, index),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(TypesWAFuture)
                                   messageName:@"WAFuture"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TypesWAFuture__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TypesWAString

@implementation TypesWAString

@dynamic ptr;
@dynamic len;

typedef struct TypesWAString__storage_ {
  uint32_t _has_storage_[1];
  uint32_t ptr;
  uint32_t len;
} TypesWAString__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ptr",
        .dataTypeSpecific.clazz = Nil,
        .number = TypesWAString_FieldNumber_Ptr,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TypesWAString__storage_, ptr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "len",
        .dataTypeSpecific.clazz = Nil,
        .number = TypesWAString_FieldNumber_Len,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TypesWAString__storage_, len),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(TypesWAString)
                                   messageName:@"WAString"
                               fileDescription:&TypesRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TypesWAString__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
