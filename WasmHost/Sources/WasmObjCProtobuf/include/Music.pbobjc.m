// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// clang-format off
// source: music.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30007
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30007 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

#import <stdatomic.h>

#import "Music.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective-C Class declarations
// Forward declarations of Objective-C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(GPBStruct);
GPBObjCClassDeclaration(MusicAuthor);
GPBObjCClassDeclaration(MusicEntry);
GPBObjCClassDeclaration(MusicListOptions);
GPBObjCClassDeclaration(MusicListOptions_Discover);
GPBObjCClassDeclaration(MusicListOptions_Search);
GPBObjCClassDeclaration(MusicListSuggestions);
GPBObjCClassDeclaration(MusicListTracks);
GPBObjCClassDeclaration(MusicOptions);
GPBObjCClassDeclaration(MusicTrack);
GPBObjCClassDeclaration(MusicTrackDetails);
GPBObjCClassDeclaration(MusicTrackDetails_Format);
GPBObjCClassDeclaration(MusicTranscript);
GPBObjCClassDeclaration(MusicTranscript_Segment);

#pragma mark - MusicRoot

@implementation MusicRoot

// No extensions in the file and no imports or none of the imports (direct or
// indirect) defined extensions, so no need to generate +extensionRegistry.

@end

static GPBFileDescription MusicRoot_FileDescription = {
  .package = "asyncify.music",
  .prefix = "Music",
  .syntax = GPBFileSyntaxProto3
};

#pragma mark - Enum MusicCallID

GPBEnumDescriptor *MusicCallID_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static const char *valueNames =
        "CallIdUnspecified\000CallIdGetDetails\000CallI"
        "dGetPlaylistDetails\000CallIdSearch\000CallIdS"
        "uggestion\000CallIdGetOptions\000CallIdGetDisc"
        "over\000CallIdGetTranscript\000";
    static const int32_t values[] = {
        MusicCallID_CallIdUnspecified,
        MusicCallID_CallIdGetDetails,
        MusicCallID_CallIdGetPlaylistDetails,
        MusicCallID_CallIdSearch,
        MusicCallID_CallIdSuggestion,
        MusicCallID_CallIdGetOptions,
        MusicCallID_CallIdGetDiscover,
        MusicCallID_CallIdGetTranscript,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MusicCallID)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MusicCallID_IsValidValue
                                            flags:GPBEnumDescriptorInitializationFlag_None];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MusicCallID_IsValidValue(int32_t value__) {
  switch (value__) {
    case MusicCallID_CallIdUnspecified:
    case MusicCallID_CallIdGetDetails:
    case MusicCallID_CallIdGetPlaylistDetails:
    case MusicCallID_CallIdSearch:
    case MusicCallID_CallIdSuggestion:
    case MusicCallID_CallIdGetOptions:
    case MusicCallID_CallIdGetDiscover:
    case MusicCallID_CallIdGetTranscript:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - MusicOptions

@implementation MusicOptions

@dynamic provider;

typedef struct MusicOptions__storage_ {
  uint32_t _has_storage_[1];
  NSString *provider;
} MusicOptions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "provider",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicOptions_FieldNumber_Provider,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MusicOptions__storage_, provider),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MusicOptions)
                                   messageName:@"Options"
                               fileDescription:&MusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MusicOptions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MusicListOptions

@implementation MusicListOptions

@dynamic providersArray, providersArray_Count;
@dynamic hasDiscover, discover;
@dynamic hasSearch, search;

typedef struct MusicListOptions__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *providersArray;
  MusicListOptions_Discover *discover;
  MusicListOptions_Search *search;
} MusicListOptions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "providersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(MusicEntry),
        .number = MusicListOptions_FieldNumber_ProvidersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MusicListOptions__storage_, providersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "discover",
        .dataTypeSpecific.clazz = GPBObjCClass(MusicListOptions_Discover),
        .number = MusicListOptions_FieldNumber_Discover,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MusicListOptions__storage_, discover),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "search",
        .dataTypeSpecific.clazz = GPBObjCClass(MusicListOptions_Search),
        .number = MusicListOptions_FieldNumber_Search,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MusicListOptions__storage_, search),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MusicListOptions)
                                   messageName:@"ListOptions"
                               fileDescription:&MusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MusicListOptions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MusicListOptions_Discover

@implementation MusicListOptions_Discover

@dynamic categoriesArray, categoriesArray_Count;

typedef struct MusicListOptions_Discover__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *categoriesArray;
} MusicListOptions_Discover__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "categoriesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(MusicEntry),
        .number = MusicListOptions_Discover_FieldNumber_CategoriesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MusicListOptions_Discover__storage_, categoriesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MusicListOptions_Discover)
                                   messageName:@"Discover"
                               fileDescription:&MusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MusicListOptions_Discover__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(MusicListOptions)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MusicListOptions_Search

@implementation MusicListOptions_Search

@dynamic scopesArray, scopesArray_Count;

typedef struct MusicListOptions_Search__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *scopesArray;
} MusicListOptions_Search__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "scopesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicListOptions_Search_FieldNumber_ScopesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MusicListOptions_Search__storage_, scopesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MusicListOptions_Search)
                                   messageName:@"Search"
                               fileDescription:&MusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MusicListOptions_Search__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(MusicListOptions)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MusicEntry

@implementation MusicEntry

@dynamic id_p;
@dynamic name;

typedef struct MusicEntry__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
} MusicEntry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicEntry_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MusicEntry__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicEntry_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MusicEntry__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MusicEntry)
                                   messageName:@"Entry"
                               fileDescription:&MusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MusicEntry__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MusicTrackDetails

@implementation MusicTrackDetails

@dynamic id_p;
@dynamic title;
@dynamic description_p;
@dynamic hasAuthor, author;
@dynamic formatsArray, formatsArray_Count;
@dynamic hasThumbnail, thumbnail;
@dynamic duration;
@dynamic views;
@dynamic hasDashManifestURL, dashManifestURL;
@dynamic hasHlsManifestURL, hlsManifestURL;
@dynamic relatedTracksArray, relatedTracksArray_Count;

typedef struct MusicTrackDetails__storage_ {
  uint32_t _has_storage_[1];
  int32_t views;
  NSString *id_p;
  NSString *title;
  NSString *description_p;
  MusicAuthor *author;
  NSMutableArray *formatsArray;
  NSString *thumbnail;
  NSString *dashManifestURL;
  NSString *hlsManifestURL;
  NSMutableArray *relatedTracksArray;
  double duration;
} MusicTrackDetails__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicTrackDetails_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MusicTrackDetails__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicTrackDetails_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MusicTrackDetails__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicTrackDetails_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MusicTrackDetails__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "author",
        .dataTypeSpecific.clazz = GPBObjCClass(MusicAuthor),
        .number = MusicTrackDetails_FieldNumber_Author,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MusicTrackDetails__storage_, author),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "formatsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(MusicTrackDetails_Format),
        .number = MusicTrackDetails_FieldNumber_FormatsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MusicTrackDetails__storage_, formatsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "thumbnail",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicTrackDetails_FieldNumber_Thumbnail,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MusicTrackDetails__storage_, thumbnail),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "duration",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicTrackDetails_FieldNumber_Duration,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MusicTrackDetails__storage_, duration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "views",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicTrackDetails_FieldNumber_Views,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MusicTrackDetails__storage_, views),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "dashManifestURL",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicTrackDetails_FieldNumber_DashManifestURL,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(MusicTrackDetails__storage_, dashManifestURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hlsManifestURL",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicTrackDetails_FieldNumber_HlsManifestURL,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(MusicTrackDetails__storage_, hlsManifestURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "relatedTracksArray",
        .dataTypeSpecific.clazz = GPBObjCClass(MusicTrack),
        .number = MusicTrackDetails_FieldNumber_RelatedTracksArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MusicTrackDetails__storage_, relatedTracksArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MusicTrackDetails)
                                   messageName:@"TrackDetails"
                               fileDescription:&MusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MusicTrackDetails__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\002\t\004\250\241!!\000\n\003\250\241!!\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MusicTrackDetails_Format

@implementation MusicTrackDetails_Format

@dynamic id_p;
@dynamic URL;
@dynamic hasQuality, quality;
@dynamic hasMetadata, metadata;
@dynamic hasMimeType, mimeType;

typedef struct MusicTrackDetails_Format__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *URL;
  NSString *quality;
  GPBStruct *metadata;
  NSString *mimeType;
} MusicTrackDetails_Format__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicTrackDetails_Format_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MusicTrackDetails_Format__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "URL",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicTrackDetails_Format_FieldNumber_URL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MusicTrackDetails_Format__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "quality",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicTrackDetails_Format_FieldNumber_Quality,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MusicTrackDetails_Format__storage_, quality),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStruct),
        .number = MusicTrackDetails_Format_FieldNumber_Metadata,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MusicTrackDetails_Format__storage_, metadata),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mimeType",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicTrackDetails_Format_FieldNumber_MimeType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MusicTrackDetails_Format__storage_, mimeType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MusicTrackDetails_Format)
                                   messageName:@"Format"
                               fileDescription:&MusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MusicTrackDetails_Format__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
      static const char *extraTextFormatInfo =
        "\001\002!!!\000";
      [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
    #endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClass:GPBObjCClass(MusicTrackDetails)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MusicTranscript

@implementation MusicTranscript

@dynamic segmentsArray, segmentsArray_Count;

typedef struct MusicTranscript__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *segmentsArray;
} MusicTranscript__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "segmentsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(MusicTranscript_Segment),
        .number = MusicTranscript_FieldNumber_SegmentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MusicTranscript__storage_, segmentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MusicTranscript)
                                   messageName:@"Transcript"
                               fileDescription:&MusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MusicTranscript__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MusicTranscript_Segment

@implementation MusicTranscript_Segment

@dynamic text;
@dynamic offset;
@dynamic duration;

typedef struct MusicTranscript_Segment__storage_ {
  uint32_t _has_storage_[1];
  int32_t offset;
  int32_t duration;
  NSString *text;
} MusicTranscript_Segment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicTranscript_Segment_FieldNumber_Text,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MusicTranscript_Segment__storage_, text),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "offset",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicTranscript_Segment_FieldNumber_Offset,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MusicTranscript_Segment__storage_, offset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "duration",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicTranscript_Segment_FieldNumber_Duration,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MusicTranscript_Segment__storage_, duration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MusicTranscript_Segment)
                                   messageName:@"Segment"
                               fileDescription:&MusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MusicTranscript_Segment__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(MusicTranscript)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MusicAuthor

@implementation MusicAuthor

@dynamic id_p;
@dynamic name;
@dynamic hasThumbnail, thumbnail;

typedef struct MusicAuthor__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  NSString *thumbnail;
} MusicAuthor__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicAuthor_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MusicAuthor__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicAuthor_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MusicAuthor__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "thumbnail",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicAuthor_FieldNumber_Thumbnail,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MusicAuthor__storage_, thumbnail),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MusicAuthor)
                                   messageName:@"Author"
                               fileDescription:&MusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MusicAuthor__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MusicTrack

@implementation MusicTrack

@dynamic id_p;
@dynamic title;
@dynamic kind;
@dynamic hasAuthor, author;
@dynamic hasThumbnail, thumbnail;

typedef struct MusicTrack__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *title;
  NSString *kind;
  MusicAuthor *author;
  NSString *thumbnail;
} MusicTrack__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicTrack_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MusicTrack__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicTrack_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MusicTrack__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "kind",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicTrack_FieldNumber_Kind,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MusicTrack__storage_, kind),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "author",
        .dataTypeSpecific.clazz = GPBObjCClass(MusicAuthor),
        .number = MusicTrack_FieldNumber_Author,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MusicTrack__storage_, author),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "thumbnail",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicTrack_FieldNumber_Thumbnail,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MusicTrack__storage_, thumbnail),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MusicTrack)
                                   messageName:@"Track"
                               fileDescription:&MusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MusicTrack__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MusicListTracks

@implementation MusicListTracks

@dynamic itemsArray, itemsArray_Count;
@dynamic hasContinuation, continuation;

typedef struct MusicListTracks__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *itemsArray;
  NSString *continuation;
} MusicListTracks__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(MusicTrack),
        .number = MusicListTracks_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MusicListTracks__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "continuation",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicListTracks_FieldNumber_Continuation,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MusicListTracks__storage_, continuation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MusicListTracks)
                                   messageName:@"ListTracks"
                               fileDescription:&MusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MusicListTracks__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MusicListSuggestions

@implementation MusicListSuggestions

@dynamic suggestionsArray, suggestionsArray_Count;

typedef struct MusicListSuggestions__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *suggestionsArray;
} MusicListSuggestions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "suggestionsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = MusicListSuggestions_FieldNumber_SuggestionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MusicListSuggestions__storage_, suggestionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:GPBObjCClass(MusicListSuggestions)
                                   messageName:@"ListSuggestions"
                               fileDescription:&MusicRoot_FileDescription
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MusicListSuggestions__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown | GPBDescriptorInitializationFlag_ClosedEnumSupportKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)

// clang-format on
